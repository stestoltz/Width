0: i j l                     # do while counter > 0
1: f r t I                   # end
2: c k s v x y z J           # 0 in commands
3: a b d e g h n o p q u L   # separator (no-op)
4: F T Z                     # push base 10 number, using left side row titles (width numbers); terminated with original char
5: A B E K P S V X Y         # 1 in commands
6: w C D H N R U             # 2 in commands
7: G O Q                     # push string literal; sets of 2 width numbers equate to index in printable ASCII; terminated with original char
8: m M                       # if top of stack
9: W                         # else

0 duplicate ToS
1 swap ToS and previous
2 delete ToS

00 set counter to read ToS
01 push height of stack
02 input string
10 input number
11 to string
12 to int
20 inc counter
21 dec counter
22 pop and output

000 to float
001 negation
002 not
010 plus
011 minus
012 divide
020 int div
021 times
022 mod
100 factorial
101 concat
102 power
110 root
111 log n
112 bitwise not
120 bitwise or
121 bitwise and
122 left shift
200 right shift
201 index ( second [ ToS ] )
202 repeat
210 push counter
211 set counter to pop ToS
212 split ToS by ""
220 swap ToS and bottom
221 length of read
222 read and output

0000 reverse stack
0001 sort stack
0002 stack [ counter ] !
0010 stack [ ToS ] !
0011
0012
0020 sum of numbers in stack
0021 product of numbers in stack
0022
0100 pop stack to backburner
0101 push stack from backburner to top of stack
0102 push stack from backburner to bottom of stack
0110 pop ToS to backburner
0111 pop ToS to backburner split on ""
0112 pop ToS to backburner split on y
0120 read top of backburner
0121 pop first ToS stack to backburner
0122 pop last ToS stack to backburner
0200 join stack on ToS
0201 join stack on ""
0202 join y deep into stack on ToS
0210 join ToS deep into stack on ""
0211
0212
0220 split ToS by y
0221 split ToS by ", "
0222
1000 is prime
1001 is palindrome
1002 1 / ToS !
1010 1 - ToS !
1011 1 + ToS !
1012 2 * ToS !
1020 ToS / 2 !
1021 ToS ^ 2 !
1022 .ToS
1100 ==
1101 !=
1102 >
1110 <
1111 >=
1112 <=
1120 pop in stack
1121 pop in backburner
1122 pop == counter
1200 ToS in second
1201 second.find( ToS )
1202
1210
1211
1212 lower
1220 upper
1221 ord
1222 chr
2000 floor
2001 ceil
2002 round
2010 abs
2011
2012
2020 length of pop
2021
2022
2100 min of stack
2101 max of stack
2102 count of ToS in stack
2110 average of stack
2111 prefixes of stack !
2112 suffixes of stack !
2120 deltas of stack !
2121
2122
2200 replace all second in third by ToS
2201 replace first second in third by ToS
2202 remove all ToS in second
2210 remove first ToS in second
2211
2212 push python eval ToS
2220 push python eval input
2221 output read ToS
2222 error